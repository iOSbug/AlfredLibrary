// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name AlfredBridgeBinder
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import AlfredBridgeBinder
import AlfredCore
import AlfredNetManager
import SystemConfiguration.CaptiveNetwork
import CocoaAsyncSocket
import CoreLocation
import Foundation
import NMSSH
import NetworkExtension
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol RawLibrary {
  static var name: Swift.String { get }
  static var version: Swift.String? { get }
  static func newSession() -> (any AlfredBridgeBinder.RawSession)?
  static func newChannel(_ session: any AlfredBridgeBinder.RawSession) -> (any AlfredBridgeBinder.RawChannel)?
}
public enum Fingerprint {
  case md5, sha1
  public static func == (a: AlfredBridgeBinder.Fingerprint, b: AlfredBridgeBinder.Fingerprint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthenticationMethod : Swift.CustomStringConvertible, Swift.Equatable {
  case password, keyboardInteractive, publicKey
  case unknown(Swift.String)
  public init(_ rawValue: Swift.String)
  public var description: Swift.String {
    get
  }
}
public func == (lhs: AlfredBridgeBinder.AuthenticationMethod, rhs: AlfredBridgeBinder.AuthenticationMethod) -> Swift.Bool
public enum AuthenticationChallenge {
  case byPassword(username: Swift.String, password: Swift.String)
  case byKeyboardInteractive(username: Swift.String, callback: ((Swift.String) -> Swift.String))
  case byPublicKey(username: Swift.String, password: Swift.String, publicKey: Swift.String, privateKey: Swift.String)
}
public protocol RawSession {
  var authenticated: Swift.Bool { get }
  var blocking: Swift.Bool { get set }
  var banner: Swift.String? { get }
  var timeout: Swift.Int { get set }
  func setBanner(_ banner: Swift.String) throws
  func handshake(_ socket: CoreFoundation.CFSocket) throws
  func fingerprint(_ hash: AlfredBridgeBinder.Fingerprint) -> Swift.String
  func authenticationList(_ username: Swift.String) throws -> [Swift.String]
  func authenticateByPassword(_ username: Swift.String, password: Swift.String) throws
  func authenticateByKeyboardInteractive(_ username: Swift.String, callback: @escaping ((Swift.String) -> Swift.String)) throws
  func authenticateByPublicKey(_ username: Swift.String, password: Swift.String, publicKey: Swift.String, privateKey: Swift.String) throws
  func disconnect() throws
}
public struct Environment {
  public let name: Swift.String
  public let variable: Swift.String
}
public struct Terminal : Swift.ExpressibleByStringLiteral, Swift.CustomStringConvertible {
  public let name: Swift.String
  public var width: Swift.UInt
  public var height: Swift.UInt
  public var description: Swift.String {
    get
  }
  public init(_ name: Swift.String, width: Swift.UInt = 80, height: Swift.UInt = 24)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.String
}
public protocol RawChannel {
  var opened: Swift.Bool { get }
  var receivedEOF: Swift.Bool { get }
  func openChannel() throws
  func closeChannel() throws
  func setEnvironment(_ environment: AlfredBridgeBinder.Environment) throws
  func requestPseudoTerminal(_ terminal: AlfredBridgeBinder.Terminal) throws
  func setPseudoTerminalSize(_ terminal: AlfredBridgeBinder.Terminal) throws
  func exec(_ command: Swift.String) throws
  func shell() throws
  func read() throws -> Foundation.Data
  func readError() throws -> Foundation.Data
  func write(_ data: Foundation.Data) -> (error: (any Swift.Error)?, bytesSent: Swift.Int)
  func exitStatus() -> Swift.Int?
  func sendEOF() throws
}
public protocol RawSFTP {
}
public protocol RawSCP {
}
public typealias SSHCompletionBlock = ((any Swift.Error)?) -> Swift.Void
open class SSHSession<T> where T : AlfredBridgeBinder.RawLibrary {
  final public let host: Swift.String
  final public let port: Swift.UInt16
  public var log: any AlfredBridgeBinder.Logger
  public var version: Swift.String? {
    get
  }
  public init?(host: Swift.String, port: Swift.UInt16 = 22)
  @objc deinit
  public var banner: Swift.String?
  public var connected: Swift.Bool {
    get
  }
  public var remoteBanner: Swift.String? {
    get
  }
  public var timeout: Foundation.TimeInterval {
    get
    set
  }
  public func connect() -> Self
  public func connect(_ completion: AlfredBridgeBinder.SSHCompletionBlock?)
  public func disconnect(_ completion: (() -> ())?)
  public var authenticated: Swift.Bool {
    get
  }
  public func supportedAuthenticationMethods(_ username: Swift.String) throws -> [AlfredBridgeBinder.AuthenticationMethod]
  public func authenticate(_ challenge: AlfredBridgeBinder.AuthenticationChallenge?) -> Self
  public func authenticate(_ challenge: AlfredBridgeBinder.AuthenticationChallenge?, completion: AlfredBridgeBinder.SSHCompletionBlock?)
  public func fingerprint(_ hash: AlfredBridgeBinder.Fingerprint = .md5) throws -> Swift.String
  public func checkFingerprint(_ hash: AlfredBridgeBinder.Fingerprint = .md5, callback: @escaping (Swift.String) -> Swift.Bool) -> Self
  public func checkFingerprint(_ hash: AlfredBridgeBinder.Fingerprint = .md5, fingerprints validFingerprints: Swift.String...) -> Self
}
@objc @_inheritsConvenienceInitializers public class BridgeSwiftBinder : ObjectiveC.NSObject {
  @objc public static let shared: AlfredBridgeBinder.BridgeSwiftBinder
  @objc public func accessLocation()
  @objc public func connectToWiFi(deviceId: Swift.String, success: @escaping (() -> ()), failure: @escaping AlfredCore.AlfredErrorCallback)
  @objc public func querySSID(_ ssid: Swift.String, success: @escaping (() -> ()), failure: @escaping AlfredCore.AlfredErrorCallback)
  @objc public func requestWifiList(success: @escaping (([AlfredCore.AlfredBridgeHotspot]) -> ()), failure: @escaping AlfredCore.AlfredErrorCallback)
  @objc public func requestWifiConfig(hotspot: AlfredCore.AlfredBridgeHotspot, password: Swift.String, success: @escaping (() -> ()), failure: @escaping AlfredCore.AlfredErrorCallback)
  @objc public func unbindLock(deviceId: Swift.String, success: @escaping (() -> ()), failure: @escaping AlfredCore.AlfredErrorCallback)
  @objc public func cancelWifiConfig()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, unavailable)
public class SFTPSession<T> : AlfredBridgeBinder.SSHSession<T> where T : AlfredBridgeBinder.RawLibrary {
  override public init?(host: Swift.String, port: Swift.UInt16 = super)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SSHCommand<T> : AlfredBridgeBinder.SSHChannel<T> where T : AlfredBridgeBinder.RawLibrary {
  public init?(host: Swift.String, port: Swift.UInt16 = 22, environment: [AlfredBridgeBinder.Environment] = [], terminal: AlfredBridgeBinder.Terminal? = nil)
  @objc deinit
  public func close()
  public func execute(_ command: Swift.String, completion: ((Swift.String, Foundation.Data?, (any Swift.Error)?) -> Swift.Void)?)
  public func execute(_ command: Swift.String, completion: ((Swift.String, Swift.String?, (any Swift.Error)?) -> Swift.Void)?)
}
@_inheritsConvenienceInitializers public class SSHShell<T> : AlfredBridgeBinder.SSHChannel<T> where T : AlfredBridgeBinder.RawLibrary {
  public init?(host: Swift.String, port: Swift.UInt16 = 22, environment: [AlfredBridgeBinder.Environment] = [], terminal: AlfredBridgeBinder.Terminal? = nil)
  @objc deinit
  public var readStringCallback: ((_ string: Swift.String?, _ error: Swift.String?) -> Swift.Void)? {
    get
  }
  public var readDataCallback: ((_ data: Foundation.Data?, _ error: Foundation.Data?) -> Swift.Void)? {
    get
  }
  public func withCallback(_ callback: ((_ string: Swift.String?, _ error: Swift.String?) -> Swift.Void)?) -> Self
  public func withCallback(_ callback: ((_ data: Foundation.Data?, _ error: Foundation.Data?) -> Swift.Void)?) -> Self
  public func open() -> Self
  public func open(_ completion: AlfredBridgeBinder.SSHCompletionBlock?)
  public func close(_ completion: (() -> ())?)
  public func write(_ data: Foundation.Data) -> Self
  public func write(_ data: Foundation.Data, completion: (((any Swift.Error)?) -> Swift.Void)?)
  public func write(_ command: Swift.String) -> Self
  public func write(_ command: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers open class SSHChannel<T> : AlfredBridgeBinder.SSHSession<T> where T : AlfredBridgeBinder.RawLibrary {
  public var terminal: AlfredBridgeBinder.Terminal? {
    get
  }
  override public func disconnect(_ completion: (() -> ())?)
  public func setTerminalSize(width: Swift.UInt, height: Swift.UInt) -> Self
  public func setTerminalSize(width: Swift.UInt, height: Swift.UInt, completion: AlfredBridgeBinder.SSHCompletionBlock?)
  @objc deinit
}
public protocol Logger {
  var enabled: Swift.Bool { get set }
  var level: AlfredBridgeBinder.LogLevel { get set }
  func debug(_ message: Swift.String)
  func info(_ message: Swift.String)
  func warn(_ message: Swift.String)
  func error(_ message: Swift.String)
}
public enum LogLevel : Swift.CustomStringConvertible, Swift.Comparable {
  case debug, info, warning, error
  public var description: Swift.String {
    get
  }
  public static func == (a: AlfredBridgeBinder.LogLevel, b: AlfredBridgeBinder.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func < (lhs: AlfredBridgeBinder.LogLevel, rhs: AlfredBridgeBinder.LogLevel) -> Swift.Bool
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, unavailable)
public class SCPSession<T> : AlfredBridgeBinder.SSHChannel<T> where T : AlfredBridgeBinder.RawLibrary {
  public func download(_ from: Swift.String, to path: Swift.String) -> Self
  public func download(_ from: Swift.String, to path: Swift.String, completion: AlfredBridgeBinder.SSHCompletionBlock?)
  public func download(_ from: Swift.String, to stream: Foundation.OutputStream) -> Self
  public func download(_ from: Swift.String, to stream: Foundation.OutputStream, completion: AlfredBridgeBinder.SSHCompletionBlock?)
  public func download(_ from: Swift.String, completion: @escaping ((Foundation.Data?, (any Swift.Error)?) -> Swift.Void))
  @objc deinit
}
public typealias SSH = AlfredBridgeBinder.SSHSession<AlfredBridgeBinder.Libssh2>
public typealias Channel = AlfredBridgeBinder.SSHChannel<AlfredBridgeBinder.Libssh2>
public typealias Command = AlfredBridgeBinder.SSHCommand<AlfredBridgeBinder.Libssh2>
public typealias Shell = AlfredBridgeBinder.SSHShell<AlfredBridgeBinder.Libssh2>
@_hasMissingDesignatedInitializers public class Libssh2 : AlfredBridgeBinder.RawLibrary {
  public static var name: Swift.String {
    get
  }
  public static var version: Swift.String? {
    get
  }
  public class func newSession() -> (any AlfredBridgeBinder.RawSession)?
  public class func newChannel(_ session: any AlfredBridgeBinder.RawSession) -> (any AlfredBridgeBinder.RawChannel)?
  @objc deinit
}
public typealias SSHCompletion = ((any Swift.Error)?) -> Swift.Void
public typealias SSHNetstatCompletion = (Swift.Bool, (any Swift.Error)?) -> Swift.Void
public typealias SSHScpUploadCompletion = (Swift.Bool) -> Swift.Void
public enum SSHError : Swift.Error {
  case unknown
  case bannerReceive
  case bannerSend
  case invalidMessageAuthenticationCode
  case decrypt
  case methodNone
  case requestDenied
  case methodNotSupported
  case invalid
  case agentProtocol
  case encrypt
  case allocation
  case timeout
  case `protocol`
  case again
  case bufferTooSmall
  case badUse
  case compress
  case outOfBoundary
  case alreadyConnected
  case hostResolutionFailed
  case keyExchangeFailure
  case hostkey
  case authenticationFailed
  case passwordExpired
  case publicKeyUnverified
  case publicKeyProtocol
  case publicKeyFile
  case unsupportedAuthenticationMethod
  case knownHosts
  public enum Socket : Swift.Error {
    case write
    case read
    case disconnected
    case timeout
    case invalid
    public static func == (a: AlfredBridgeBinder.SSHError.Socket, b: AlfredBridgeBinder.SSHError.Socket) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Channel : Swift.Error {
    case unknown
    case alreadyOpen
    case invalid
    case outOfOrder
    case failure
    case requestDenied
    case windowExceeded
    case packetExceeded
    case closed
    case sentEndOfFile
    public static func == (a: AlfredBridgeBinder.SSHError.Channel, b: AlfredBridgeBinder.SSHError.Channel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SFTP : Swift.Error {
    case unknown
    case invalidSession
    case endOfFile
    case noSuchFile
    case permissionDenied
    case failure
    case badMessage
    case noConnection
    case connectionLost
    case operationUnsupported
    case invalidHandle
    case noSuchPath
    case fileAlreadyExists
    case writeProtect
    case noMedia
    case noSpaceOnFilesystem
    case quotaExceeded
    case unknownPrincipal
    case lockConflict
    case directoryNotEmpty
    case notADirectory
    case invalidFilename
    case linkLoop
    public static func == (a: AlfredBridgeBinder.SSHError.SFTP, b: AlfredBridgeBinder.SSHError.SFTP) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SCP : Swift.Error {
    case `protocol`
    case invalidPath
    public static func == (a: AlfredBridgeBinder.SSHError.SCP, b: AlfredBridgeBinder.SSHError.SCP) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Command : Swift.Error {
    case execError(Swift.String?, Foundation.Data)
  }
  public static func == (a: AlfredBridgeBinder.SSHError, b: AlfredBridgeBinder.SSHError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SSHDisconnectionCode : Swift.Int {
  case hostNotAllowedToConnect
  case protocolError
  case keyExchangeFailed
  case reserved
  case macError
  case compressionError
  case serviceNotAvailable
  case protocolVersionNotSupported
  case hostKeyNotVerifiable
  case connectionLost
  case byApplication
  case tooManyConnections
  case authenticationCancelledByUser
  case noMoreAuthenticationMethodsAvailable
  case illegalUserName
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AlfredBridgeBinder.Fingerprint : Swift.Equatable {}
extension AlfredBridgeBinder.Fingerprint : Swift.Hashable {}
extension AlfredBridgeBinder.LogLevel : Swift.Hashable {}
extension AlfredBridgeBinder.SSHError : Swift.Equatable {}
extension AlfredBridgeBinder.SSHError : Swift.Hashable {}
extension AlfredBridgeBinder.SSHError.Socket : Swift.Equatable {}
extension AlfredBridgeBinder.SSHError.Socket : Swift.Hashable {}
extension AlfredBridgeBinder.SSHError.Channel : Swift.Equatable {}
extension AlfredBridgeBinder.SSHError.Channel : Swift.Hashable {}
extension AlfredBridgeBinder.SSHError.SFTP : Swift.Equatable {}
extension AlfredBridgeBinder.SSHError.SFTP : Swift.Hashable {}
extension AlfredBridgeBinder.SSHError.SCP : Swift.Equatable {}
extension AlfredBridgeBinder.SSHError.SCP : Swift.Hashable {}
extension AlfredBridgeBinder.SSHDisconnectionCode : Swift.Equatable {}
extension AlfredBridgeBinder.SSHDisconnectionCode : Swift.Hashable {}
extension AlfredBridgeBinder.SSHDisconnectionCode : Swift.RawRepresentable {}
