// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name AlfredBridgeManager
@_exported import AlfredBridgeManager
import AlfredCore
import AlfredNetManager
import Swift
import UIKit
import _Concurrency
@objc @_inheritsConvenienceInitializers public class BridgeSwiftManager : ObjectiveC.NSObject {
  @objc public static var shared: AlfredBridgeManager.BridgeSwiftManager
  @objc public func bridgeSend(_ gatewayID: Swift.String, subdeviceID: Swift.String, data: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func devstatus(_ gateways: [AlfredCore.AlfredBridge], success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func bridgePairSubDev(_ gatewayID: Swift.String, subdeviceID: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func unpairSubdevice(_ gatewayID: Swift.String, subdeviceID: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func setLockOperation(_ gatewayID: Swift.String, subdeviceID: Swift.String, operate: AlfredCore.AlfredLockOperation, data: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func getLockRecords(_ gatewayID: Swift.String, subdeviceID: Swift.String, data: Swift.String, page: Swift.String, limit: Swift.String, success: @escaping (([AlfredCore.AlfredLockRecord]) -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func setLockConfig(_ gatewayID: Swift.String, subdeviceID: Swift.String, configID: AlfredCore.AlfredLockRequestConfig, values: Any, data: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func getLockCodes(_ gatewayID: Swift.String, subdeviceID: Swift.String, codeType: AlfredCore.AlfredLockCodeType, data: Swift.String, success: @escaping (([AlfredCore.AlfredLockCode]) -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func addLockCode(_ gatewayID: Swift.String, subdeviceID: Swift.String, codeType: AlfredCore.AlfredLockCodeType, codeIndex: Swift.String, data: Swift.String, success: @escaping ((AlfredCore.AlfredLockCode) -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func deleteLockCode(_ gatewayID: Swift.String, subdeviceID: Swift.String, codeType: AlfredCore.AlfredLockCodeType, codeIndex: Swift.String, data: Swift.String, schedData: Swift.String?, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func setLockCodePeriodSchedule(_ gatewayID: Swift.String, subdeviceID: Swift.String, codeType: AlfredCore.AlfredLockCodeType, codeIndex: Swift.String, scheduleId: Swift.String, startTime: Swift.String?, endTime: Swift.String?, data: Swift.String, usertypeData: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func setLockCodeWeeklySchedule(_ gatewayID: Swift.String, subdeviceID: Swift.String, codeType: AlfredCore.AlfredLockCodeType, codeIndex: Swift.String, scheduleId: Swift.String, startTime: Swift.String?, endTime: Swift.String?, week: [Swift.Int]?, data: Swift.String, usertypeData: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func deleteLockCodeSchedule(_ gatewayID: Swift.String, subdeviceID: Swift.String, codeType: AlfredCore.AlfredLockCodeType, codeIndex: Swift.String, scheduleId: Swift.String, data: Swift.String, usertypeData: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func getTimezones(_ gatewayID: Swift.String, success: @escaping ((AlfredCore.AlfredTimeZone) -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc public func setBridgeTimezone(_ gatewayID: Swift.String, tzName: Swift.String, tzValue: Swift.String, tzDistrict: Swift.String, success: @escaping (() -> ()), failure: @escaping ((AlfredCore.NetErrorModel) -> ()))
  @objc override dynamic public init()
  @objc deinit
}
