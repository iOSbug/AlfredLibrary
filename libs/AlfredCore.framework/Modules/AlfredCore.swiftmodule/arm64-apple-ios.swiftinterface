// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name AlfredCore
@_exported import AlfredCore
import Foundation
import HandyJSON
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers public class DebugLog : ObjectiveC.NSObject {
  @objc public static func showDebugLog(isShow: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
public func DLog<T>(_ message: T, fileName: Swift.String = #file, methodName: Swift.String = #function, lineNumber: Swift.Int = #line)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AlfredLockInfo : AlfredCore.ResultModel {
  @objc public var mainLockTongueState: Swift.String?
  @objc public var antilockState: Swift.String?
  @objc public var doorState: Swift.String?
  @objc public var doorMagnetState: Swift.String?
  @objc public var safeModeState: Swift.String?
  @objc public var adminPwdState: Swift.String?
  @objc public var autoState: Swift.String?
  @objc public var armingState: Swift.String?
  @objc public var powersave: Swift.String?
  @objc public var soundVolume: AlfredCore.AlfredLockVoice
  @objc public var language: Swift.String?
  @objc public var battery: Swift.String?
  @objc public var batterytime: Swift.String?
  @objc public var timeSeconds: Swift.UInt64
  @objc public static func getLockInfo(_ info: Swift.String) -> AlfredCore.AlfredLockInfo?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NetErrorModel : ObjectiveC.NSObject {
  @objc public var eCode: Swift.Int
  @objc public var eMessage: Swift.String?
  public init(_ eCode: Swift.Int?, eMessage: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredDeviceList : AlfredCore.ResultModel {
  public var conDevices: [AlfredCore.ConDevice]?
  public var devGenerals: [AlfredCore.DevGeneral]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConDevice : AlfredCore.ResultModel {
  @objc public var deviceId: Swift.String?
  @objc public var deviceType: Swift.String?
  @objc public var aliasName: Swift.String?
  @objc public var conType: Swift.String?
  @objc public var conStatus: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DevGeneral : AlfredCore.ResultModel {
  @objc public var deviceId: Swift.String?
  @objc public var slaves: [Swift.String]?
  @objc required dynamic public init()
  @objc deinit
}
public protocol NetDecodable : HandyJSON.HandyJSON {
  static func parse(json: Any) -> (Self?, AlfredCore.NetErrorModel?)
}
extension NetDecodable {
  public static func parse(json: Any) -> (Self?, AlfredCore.NetErrorModel?)
  public static func parseArr(json: Any) -> ([Self]?, AlfredCore.NetErrorModel?)
}
@objc @_inheritsConvenienceInitializers open class ResultModel : ObjectiveC.NSObject, AlfredCore.NetDecodable {
  @objc override required dynamic public init()
  open func mapping(mapper: HandyJSON.HelpingMapper)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeHotspot : AlfredCore.ResultModel {
  @objc public var ssid: Swift.String?
  @objc public var open: Swift.Bool
  @objc public var signal: Swift.Int
  @objc public var i: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredFwVersionUpgrade : AlfredCore.ResultModel {
  @objc public var success: Swift.Bool
  @objc public var downloadUrl: Swift.String?
  @objc public var priority: Swift.String?
  @objc public var releaseNoteUrl: Swift.String?
  @objc public var version: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GCDTimerUtils : ObjectiveC.NSObject {
  @objc public class func dispatchTimer(timeInterval: Swift.Double, repeatCount: Swift.Int, handler: @escaping (Dispatch.DispatchSourceTimer?, Swift.Int) -> ()) -> Dispatch.DispatchSourceTimer?
  @objc public class func dispatchTimer(timeInterval: Swift.Double, handler: @escaping (Dispatch.DispatchSourceTimer?) -> ()) -> Dispatch.DispatchSourceTimer?
  @objc public class func dispatchAfter(after: Swift.Double, handler: @escaping () -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgePair : AlfredCore.ResultModel {
  @objc public var deviceid: Swift.String?
  @objc public var subDeviceId: Swift.String?
  @objc public var status: Swift.String?
  @objc public var value: Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeOperate : AlfredCore.ResultModel {
  @objc public var status: Swift.String?
  @objc public var lockStatus: Swift.String?
  @objc public var err: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeLockStatusListModel : AlfredCore.ResultModel {
  @objc public var value: [AlfredCore.AlfredBridgeStatusModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeStatusModel : AlfredCore.ResultModel {
  @objc public var deviceId: Swift.String?
  @objc public var onlineStatus: Swift.String?
  @objc public var subDevices: [AlfredCore.AlfredBridgeLockStatusModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeLockStatusModel : AlfredCore.ResultModel {
  @objc public var deviceId: Swift.String?
  @objc public var onlineStatus: Swift.String?
  @objc public var lockStatus: Swift.String?
  @objc public var malfunction: Swift.String?
  @objc public var blesignal: Swift.String?
  @objc public var blesignalTs: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridges : AlfredCore.ResultModel {
  @objc public var infos: [AlfredCore.AlfredBridge]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridge : AlfredCore.ResultModel {
  @objc public var did: Swift.String?
  @objc public var dtype: Swift.String?
  @objc public var info: AlfredCore.AlfredBridgeInfo?
  @objc public var slaves: [Swift.String]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeInfo : AlfredCore.ResultModel {
  @objc public var base: AlfredCore.AlfredBridgeInfoBase?
  @objc public var networkConfig: AlfredCore.AlfredBridgeInfoNetworkConfig?
  @objc public var timeConfig: AlfredCore.AlfredTimeConfig?
  @objc public var newFwversion: AlfredCore.AlfredFwVersionUpgrade?
  @objc public var capability: AlfredCore.AlfredBridgeCapabilityModel?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeInfoBase : AlfredCore.ResultModel {
  @objc public var aliasName: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var deviceType: Swift.String?
  @objc public var deviceMode: Swift.String?
  @objc public var fwVersion: Swift.String?
  @objc public var newFwVersion: Swift.String?
  @objc public var onlineStatus: Swift.String?
  @objc public var remoteAddr: Swift.String?
  @objc public var vendorCode: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeInfoNetworkConfig : AlfredCore.ResultModel {
  @objc public var channel: Swift.String?
  @objc public var ethMac: Swift.String?
  @objc public var localDirectProbeUrl: Swift.String?
  @objc public var localIp: Swift.String?
  @objc public var localIpMask: Swift.String?
  @objc public var netLinkType: Swift.String?
  @objc public var ssid: Swift.String?
  @objc public var wanIp: Swift.String?
  @objc public var wlanMac: Swift.String?
  @objc public var wifiSignal: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeCapabilityModel : AlfredCore.ResultModel {
  @objc public var diagnose: Swift.String?
  @objc public var localStorageTypes: Swift.String?
  @objc public var networkConfig: Swift.String?
  @objc public var privLiveStream: Swift.String?
  @objc public var timeZoneVersion: Swift.String?
  @objc public var newtz: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredBridgeBindStatus : AlfredCore.ResultModel {
  @objc public var deviceId: Swift.String?
  @objc public var retCode: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredLockRecords : AlfredCore.ResultModel {
  @objc public var logs: [AlfredCore.AlfredLockRecord]?
  @objc public var lasttime: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredLockRecord : AlfredCore.ResultModel {
  @objc public var name: Swift.String?
  @objc public var time: Swift.String?
  @objc public var type: Swift.String?
  @objc public var index: Swift.String?
  @objc public var lockevent: Swift.String?
  @objc public var recordID: AlfredCore.AlfredLockRecordID {
    @objc get
    @objc set(newValue)
  }
  override public func mapping(mapper: HandyJSON.HelpingMapper)
  @objc public static func getCurrentRecord(record: Swift.String) -> AlfredCore.AlfredLockRecord?
  @objc public static func getNewLockLog(_ logstr: Swift.String) -> AlfredCore.AlfredLockRecord?
  public static func getCurrentRecordNotApp(record: Swift.String) -> AlfredCore.AlfredLockRecord?
  public static func getLockAllLog(_ logstr: Swift.String) -> AlfredCore.AlfredLockRecord?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredLock : AlfredCore.ResultModel {
  @objc public var _id: Swift.String!
  @objc public var unavailable: Swift.Bool
  @objc public var deviceid: Swift.String?
  @objc public var mode: Swift.String?
  @objc public var imode: Swift.String?
  @objc public var umode: Swift.String?
  @objc public var mac: Swift.String?
  @objc public var xsn: Swift.String?
  @objc public var type: Swift.String?
  @objc public var doorsensor: Swift.String?
  @objc public var extend: AlfredCore.AlfredLockExtendModel?
  @objc public var connectBridge: Swift.Bool
  @objc public var connectState: AlfredCore.AlfredLockConnectState
  @objc public var lockState: AlfredCore.AlfredLockStatus
  @objc public var lockInfo: AlfredCore.AlfredLockInfo?
  @objc public var ability: AlfredCore.AlfredLockAbilityModel?
  @objc public var gatewayLockBleSignal: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredLockExtendModel : AlfredCore.ResultModel {
  @objc public var name: Swift.String?
  @objc public var password1: Swift.String?
  @objc public var password2: Swift.String?
  @objc public var bluuids: [AlfredCore.AlfredInfoBluuidsModel]?
  @objc public var keys: [AlfredCore.AlfredLockCode]?
  @objc public var systemId: Swift.String?
  @objc public var modelnum: Swift.String?
  @objc public var fwversion: Swift.String?
  @objc public var hardversion: Swift.String?
  @objc public var softversion: Swift.String?
  @objc public var bluetoothname: Swift.String?
  @objc public var wfwversion: Swift.String?
  @objc public var whardversion: Swift.String?
  @objc public var wmode: Swift.String?
  @objc public var wsn: Swift.String?
  @objc public var mfwversion: Swift.String?
  @objc public var mhardversion: Swift.String?
  @objc public var mmode: Swift.String?
  @objc public var msn: Swift.String?
  @objc public var mtype: Swift.String?
  @objc public var latitude: Swift.String?
  @objc public var longitude: Swift.String?
  @objc public var autounlockradius: Swift.String?
  @objc public var autounlockenable: Swift.String?
  @objc public var autounlocktimeout: Swift.String?
  @objc public var powersave: Swift.String?
  @objc public var insidelock: Swift.String?
  @objc public var leavemode: Swift.String?
  @objc public var autolock: Swift.String?
  @objc public var language: Swift.String?
  @objc public var voice: Swift.String?
  @objc public var admincodes: Swift.String?
  @objc public var safemode: Swift.String?
  @objc public var infrared: Swift.String?
  @objc public var vibratewarning: Swift.String?
  @objc public var battery: Swift.String?
  @objc public var batterytime: Swift.String?
  @objc public var timezone: Swift.String?
  @objc public var philipscompatible: Swift.String?
  @objc public var platform: Swift.String?
  @objc public var pushenable: Swift.String?
  @objc public var hijack: Swift.String?
  @objc public var maxpinkey: Swift.String?
  @objc public var maxfingerprint: Swift.String?
  @objc public var maxaccesscard: Swift.String?
  @objc public var maxschedule: Swift.String?
  override public func mapping(mapper: HandyJSON.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AlfredLockAbilityModel : AlfredCore.ResultModel {
  @objc public var RFID: AlfredCore.AbilityModel?
  @objc public var autolock: AlfredCore.AbilityModel?
  @objc public var bluetooth: AlfredCore.AbilityModel?
  @objc public var fingerprint: AlfredCore.AbilityModel?
  @objc public var insidelock: AlfredCore.AbilityModel?
  @objc public var language: AlfredCore.AbilityModel?
  @objc public var leavemode: AlfredCore.AbilityModel?
  @objc public var safemode: AlfredCore.AbilityModel?
  @objc public var voice: AlfredCore.AbilityModel?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AbilityModel : AlfredCore.ResultModel {
  @objc public var enable: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredInfoBluuidsModel : AlfredCore.ResultModel {
  @objc public var bluuid: Swift.String?
  @objc public var puuid: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredLockCode : AlfredCore.ResultModel {
  @objc public var index: Swift.String?
  public var type: Swift.String?
  @objc public var value: Swift.String?
  @objc public var codeAttr: Swift.String?
  @objc public var scheduleid: Swift.String?
  public var scheduletype: Swift.String?
  @objc public var start: Swift.String?
  @objc public var end: Swift.String?
  @objc public var week: [Swift.Int]?
  @objc public var did: Swift.String?
  @objc public var name: Swift.String?
  @objc public var personid: Swift.String?
  @objc public var _type: AlfredCore.AlfredLockCodeType {
    @objc get
    @objc set(newValue)
  }
  @objc public var _scheduletype: AlfredCore.AlfredLockCodeSchedule {
    @objc get
    @objc set(newValue)
  }
  override public func mapping(mapper: HandyJSON.HelpingMapper)
  @objc public static func getWeekScheduleModel(result: Swift.String) -> AlfredCore.AlfredLockCode
  @objc public static func getYMDScheduleModel(result: Swift.String) -> AlfredCore.AlfredLockCode
  @objc public static func getKeyModel(result: Swift.String) -> AlfredCore.AlfredLockCode
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredTimeZone : AlfredCore.ResultModel {
  @objc public var version: Swift.String?
  @objc public var timeZones: [AlfredCore.AlfredTimeConfig]?
  @objc public var tzDistricts: [AlfredCore.TzDistrictModel]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredTimeConfig : AlfredCore.ResultModel {
  @objc public var tzName: Swift.String?
  @objc public var tzValue: Swift.String?
  @objc public var dst: Swift.String?
  @objc public var tzGmt: Swift.String?
  @objc public var tzUtc: Swift.String?
  @objc public var tzString: Swift.String?
  @objc public var en: Swift.String?
  @objc public var tzDistrict: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TzDistrictModel : AlfredCore.ResultModel {
  @objc public var tzName: Swift.String?
  @objc public var tzUtc: Swift.String?
  @objc public var en: Swift.String?
  @objc public var zh: Swift.String?
  @objc public var fr: Swift.String?
  @objc public var de: Swift.String?
  @objc public var es: Swift.String?
  @objc public var pt: Swift.String?
  @objc public var ja: Swift.String?
  @objc public var po: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredDeviceBindStatus : AlfredCore.ResultModel {
  @objc public var sn: Swift.String?
  @objc public var mac: Swift.String?
  @objc public var bleUUID: Swift.String?
  @objc public var rssi: Swift.Int
  @objc public var localName: Swift.String?
  @objc public var deviceId: Swift.String?
  @objc public var password1: Swift.String?
  @objc public var isPreemptBind: Swift.String?
  @objc public var deviceType: Swift.String?
  @objc public var mode: Swift.String?
  @objc public var status: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlfredDevices : AlfredCore.ResultModel {
  @objc public var bridges: [AlfredCore.AlfredBridge]?
  @objc public var locks: [AlfredCore.AlfredLock]?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceToken : AlfredCore.ResultModel {
  @objc public var token: Swift.String?
  public var expireSec: Swift.Int?
  @objc required dynamic public init()
  @objc deinit
}
